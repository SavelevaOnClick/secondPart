1.then() это метод который есть у каждого экземпляра Промиса, 
в качестве формального параметра принимают коллбэки;
Первый идёт чтобы обработать resolve, второй если передан reject.
метод then также каждый рас возвращяет промис,
на который мы также можем повесить then, если первый then ничего не возвращял 
то второй ничего ничего не может принять. Выполнение второго then никогда не начнётся раньше
чем первый then завершит свою работу.
Пример 
new Promise((resolve) => setTimeout(() => resolve('5'), Math.random() * 2000))
  .then((response) => response * 5)
  .then((response) => response - 10)
  .then((response) => console.log(response))

Второй then получил то что в return первого, и начал свою работу после завершения первого,
третий соответственно получил результат работы второго и начал своё выполнение.

2.-Литеральный способ :
   const obj = {} (такой обьект будет иметь свойства которые доступны для изменения,
   удаления и редактирования и они будут перечислимыми, в цепочке прототипов Object)

   Object.create() Мы можем задавать при таком способе установить какие свойства будут в новом обьекте
  (перечеслимые или неперечислимые сможем ли мы их изменять удалять)Так же через Object.create
 если мы передадим null будет пустая цепочка прототипов
   Через функцию конструктор можем создать обьект
   к примеру 
  function User (name, age) {
    name,
    age
  }
new User();

можна создать через Object.assign({}, { prop: val })

Непосредственно через Object
Свойства отличются тем что в случае создания через Object.create мы можем установить какие свойства будут у него(неперчислимые
или перечислимые изменяемые или нет....) , в сотальных по дефоулту